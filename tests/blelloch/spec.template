#define __byte_offset(x) (x << 2)

#define div2(x) (x >> 1)
#define isone(bit,x) (((x >> bit) & 1) == 1)
#define modpow2(x,y) (x & (y-1))
#define mul2(x) (x << 1)
#define mul2add1(x) (mul2(x) | 1)
#define pow2(bit) (1 << bit)

#define tid get_local_id(0)
#define other_tid __other_int(tid)

#define isvertex(x,offset) ((offset == 0) | (modpow2(x+1,offset) == 0))
#define stopped(x,offset) isvertex(x+offset, mul2(offset))
#define left(x,offset) (x - div2(offset))
#define iselement(x)  ((0 < x) & (x < {{N}}))
#define isthreadid(t) ((0 < t) & (t < {{NDIV2}}))

#define ai_idx(offset,tid) ((offset * mul2add1(tid)) - 1)
#define bi_idx(offset,tid) ((offset * (mul2(tid)+2)) - 1)

// ---------------------------------------------------------------------------
// UPSWEEP INVARIANTS
// ---------------------------------------------------------------------------
#define upsweep_core(offset,result,len,x) \
  {{upsweep_core(N)}}

#if 0
#define upsweep_nooverflow(offset,result,len,x) \
  {{upsweep_nooverflow(N)}}

#define upsweep(offset,result,len,x) \
  (upsweep_core(offset,result,len,x) & upsweep_nooverflow(offset,result,len,x))
#else
#define upsweep(offset,result,len,x) \
  upsweep_core(offset,result,len,x)
#endif

#define upsweep_barrier(tid,offset,result,len) \
  {{upsweep_barrier(N)}}

#define upsweep_d_offset \
  {{upsweep_d_offset(N)}}

// ---------------------------------------------------------------------------
// DOWNSWEEP INVARIANTS
// ---------------------------------------------------------------------------
#define sum_pow2_zeroes(bit,x) \
  {{sum_pow2_zeroes(N)}}

#define term(ghostsum,bit,x)                                   \
  __ite(!isone(bit,x), 0,                                      \
  ghostsum[x + sum_pow2_zeroes(bit,x) - pow2(bit)])

#define downsweep_core(offset,result,ghostsum,x) \
  {{downsweep_core(N)}}

#if 0
#define downsweep_nooverflow(offset,result,ghostsum,x) \
  {{downsweep_nooverflow(N)}}

#define downsweep(offset,result,ghostsum,x) \
  (downsweep_core(offset,result,ghostsum,x) & downsweep_nooverflow(offset,result,ghostsum,x))
#else
#define downsweep(offset,result,ghostsum,x) \
  downsweep_core(offset,result,ghostsum,x)
#endif

#define downsweep_barrier(tid,offset,result,ghostsum) \
  {{downsweep_barrier(N)}}

#define downsweep_d_offset \
  {{downsweep_d_offset(N)}}
